package com.cbse.user.impl;

import com.cbse.user.api.IUserService;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserServiceImpl implements IUserService {

	private final Connection connection;

	// Constructor to initialize the database connection
	public UserServiceImpl(Connection connection) {
		this.connection = connection;
	}

	@Override
	public void signUp(String email, String username, String password) {
		String insertUserSQL = "INSERT INTO users (name, email, hashed_password, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())";
		String assignDefaultRoleSQL = "INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)";

		try (PreparedStatement userStmt = connection.prepareStatement(insertUserSQL, Statement.RETURN_GENERATED_KEYS);
				PreparedStatement roleStmt = connection.prepareStatement(assignDefaultRoleSQL)) {

			// Insert into users table
			userStmt.setString(1, username);
			userStmt.setString(2, email);
			userStmt.setString(3, password);
			userStmt.executeUpdate();

			// Retrieve generated user ID
			ResultSet generatedKeys = userStmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				int userId = generatedKeys.getInt(1);

				// Assign default role (ROLE_USER = 2)
				roleStmt.setInt(1, userId);
				roleStmt.setInt(2, 2);
				roleStmt.executeUpdate();

				System.out.println("User " + username + " signed up successfully with role USER.");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public User login(String email, String password) {
		String query = "SELECT id, name, hashed_password FROM users WHERE email = ? AND is_deleted = 0";

		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setString(1, email);
			ResultSet rs = stmt.executeQuery();

			if (rs.next()) {
				String hashedPassword = rs.getString("hashed_password");
				if (hashedPassword.equals(password)) {
					System.out.println("Login successful for: " + email);
					return new User(rs.getString("email"), rs.getString("name"), password);
				} else {
					System.out.println("Invalid password for: " + email);
				}
			} else {
				System.out.println("User not found: " + email);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void logout(String email) {
		System.out.println("User " + email + " logged out.");
	}

	@Override
	public List<User> getAllUsers() {
		String query = "SELECT id, name, email, created_at FROM users WHERE is_deleted = 0";
		List<User> users = new ArrayList<>();

		try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(query)) {

			while (rs.next()) {
				String email = rs.getString("email");
				String name = rs.getString("name");
				users.add(new User(email, name, "******"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return users;
	}

	@Override
	public void addRoleToUser(String email, int role) {
		String getUserIdSQL = "SELECT id FROM users WHERE email = ?";
		String assignRoleSQL = "INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)";

		try (PreparedStatement getUserStmt = connection.prepareStatement(getUserIdSQL);
				PreparedStatement assignRoleStmt = connection.prepareStatement(assignRoleSQL)) {

			// Get user ID by email
			getUserStmt.setString(1, email);
			ResultSet rs = getUserStmt.executeQuery();

			if (rs.next()) {
				int userId = rs.getInt("id");

				// Assign role
				assignRoleStmt.setInt(1, userId);
				assignRoleStmt.setInt(2, role);
				assignRoleStmt.executeUpdate();

				System.out.println("Role " + role + " assigned to user: " + email);
			} else {
				System.out.println("User not found: " + email);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void removeRoleFromUser(String email, int role) {
		String deleteRoleSQL = "DELETE ur FROM user_roles ur JOIN users u ON ur.user_id = u.id WHERE u.email = ? AND ur.role_id = ?";

		try (PreparedStatement stmt = connection.prepareStatement(deleteRoleSQL)) {
			stmt.setString(1, email);
			stmt.setInt(2, role);

			int rowsAffected = stmt.executeUpdate();
			if (rowsAffected > 0) {
				System.out.println("Role " + role + " removed from user: " + email);
			} else {
				System.out.println("Role or user not found.");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean userHasRole(String email, int role) {
		String query = "SELECT 1 FROM user_roles ur JOIN users u ON ur.user_id = u.id WHERE u.email = ? AND ur.role_id = ?";

		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setString(1, email);
			stmt.setInt(2, role);
			ResultSet rs = stmt.executeQuery();

			if (rs.next()) {
				return true;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
}
